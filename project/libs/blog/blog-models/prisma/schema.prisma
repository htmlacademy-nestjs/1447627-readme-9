// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id       String     @id @default(uuid())
  type     PostType
  tags     Tag[]
  comments Comment[]
  favorite Favorite[]
  state    PostState  @default(PUBLISHED)

  // Content
  link            String? // required for LINK type
  linkDescription String? @map("link_description") // required for LINK type
  photoUrl        String? @map("photo_url") // required for PHOTO type
  quote           String? // required for QUOTE type
  quoteAuthor     String? @map("quote_author") // required for QUOTE type
  title           String? // required for TEXT or VIDEO types
  announcement    String? // required for TEXT type
  text            String? // required for TEXT type
  videoUrl        String? @map("video_url") // required for VIDEO type

  // Author and dates
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  publishedAt DateTime @default(now()) @map("published_at")

  // Reposts
  isRepost         Boolean @default(false) @map("is_repost")
  originalPostId   String? @map("original_post_id")
  originalAuthorId String? @map("original_author_id")

  // Indexes
  @@index([publishedAt])
  @@index([state, publishedAt])
  @@index([userId, publishedAt])
  @@index([type])
  // Rename table
  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid())
  title     String
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([title])
  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")

  @@index([postId])
  @@map("comments")
}

model Favorite {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("favorites")
}

enum PostState {
  DRAFT
  PUBLISHED
}

enum PostType {
  LINK
  PHOTO
  QUOTE
  TEXT
  VIDEO
}
